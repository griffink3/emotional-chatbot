{"version":3,"sources":["store/MessageStore.js","components/PageLoader.js","components/Homepage.js","App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["initialState","messages","type","text","actionCreators","addMessage","message","resetMessages","reducer","state","action","JSON","parse","stringify","push","PageLoader","Grid","textAlign","style","height","width","verticalAlign","Segment","Dimmer","active","Loader","size","HomePage","props","isLoading","currText","handleChange","e","name","value","setState","addUserText","a","axios","get","catch","console","error","ret","data","log","botText","Message","maxWidth","userText","direction","getMessages","overflow","minHeight","maxHeight","marginBottom","map","_isMounted","this","margin","backgroundColor","Column","Header","marginTop","Input","onChange","minWidth","borderWidth","color","content","onClick","placeholder","Button","React","Component","connect","dispatch","bindActionCreators","messageActions","App","exact","path","component","Boolean","window","location","hostname","match","baseUrl","document","getElementsByTagName","getAttribute","history","createBrowserHistory","basename","store","reducers","middleware","thunk","routerMiddleware","enhancers","rootReducer","combineReducers","router","connectRouter","routing","routerReducer","persistConfig","key","storage","persistedReducer","persistReducer","createStore","compose","applyMiddleware","configureStore","initialReduxState","persistor","persistStore","ReactDOM","render","loading","Suspense","fallback","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fa4ce27.chunk.js","sourcesContent":["const addMessage = 'ADD_MESSAGE';\nconst resetMessages = 'RESET_MESSAGES';\nconst initialState = { \n    messages: [{ type: 'bot', text: 'Hi, my name is Cooper. Say something!' }] \n};\n\nexport const actionCreators = {\n  addMessage: (message) => ({ type: addMessage, message }),\n  resetMessages: () => ({type: resetMessages})\n};\n\nexport const reducer = (state, action) => {\n  state = state || JSON.parse(JSON.stringify(initialState));\n\n  if (action.type === addMessage) {\n    let messages = state.messages;\n    messages.push(action.message)\n    return { ...state, message: messages };\n  }\n\n  if (action.type === resetMessages) {\n    return JSON.parse(JSON.stringify(initialState));\n  }\n\n  return state;\n};","\nimport React from 'react';\nimport { Grid, Segment, Dimmer, Loader } from 'semantic-ui-react'\n\nconst PageLoader = () => {\n  return (\n    <Grid textAlign='center' style={{ height: '125vh', width:'200vh' }} verticalAlign='middle'>\n      <Segment style={{ height: '100%', width: '100%' }}>\n        <Dimmer active>\n          <Loader size='huge'>Loading</Loader>\n        </Dimmer>\n      </Segment>\n    </Grid>\n  );\n};\n\nexport default PageLoader;\n\n\n\n","import React from 'react'\nimport { Button, Form, Grid, Header, Image, Message, Segment, Modal, Input } from 'semantic-ui-react'\nimport {bindActionCreators} from \"redux\";\nimport { actionCreators as messageActions } from '../store/MessageStore';\nimport {connect} from \"react-redux\";\nimport PageLoader from \"./PageLoader\";\nimport axios from 'axios';\n\nclass HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n  }\n\n  state = {\n    isLoading: true,\n    currText: '',\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.setState({ isLoading: false });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n// Helpful Functions\n\nhandleChange = (e, { name, value }) => this.setState({ [name]: value });\n\naddUserText = async () => {\n    this.props.addMessage({ type: 'user', text: this.state.currText });\n    let ret = await axios.get(\"http://35.197.119.187:5000/send?text=\" + this.state.currText).catch(e => console.error(e));\n    if (ret && ret.data) {\n        console.log(ret.data)\n        this.props.addMessage({ type: 'bot', text: ret.data });\n    } else {\n        this.props.addMessage({ type: 'bot', text: 'My brain isn\\'t working right now. Sorry!' });\n    }\n    this.setState({ currText: '' });\n}\n\n// Component Functions\n\nbotText = (text) => {\n    return (\n    <Message style={{ textAlign: 'left', maxWidth: '75%' }}>\n        <p>{text}</p>\n    </Message>  \n    )\n}\n\nuserText = (text) => {\n    return (\n    <div style={{ direction: 'rtl' }}>\n        <Message style={{ direction: 'ltr', textAlign: 'left', maxWidth: '75%' }}>\n            <p>{text}</p>\n        </Message> \n    </div>\n    )\n}\n\ngetMessages = () => {\n    return (\n    <Segment style={{overflow: 'auto', minHeight: '50%', maxHeight: '50%', marginBottom: '0px' }}>\n        {this.props.messages.map(message => {\n            if (message.type == 'bot') {\n                return this.botText(message.text)\n            } else if (message.type == 'user') {\n                return this.userText(message.text)\n            } \n        })}\n        {/* {this.botText('Hi! My name is Cooper.')}\n        {this.userText('Hi Cooper. How are you?')}\n        <Message style={{ textAlign: 'left', maxWidth: '75%' }}>\n            <p>Good. How about you?</p>\n        </Message>   \n        <div style={{ direction: 'rtl' }}>\n        <Message style={{ direction: 'ltr', textAlign: 'left', maxWidth: '75%' }}>\n            <p>I'm great. So what do you like to do?</p>\n        </Message> \n        </div>  \n        <Message style={{ textAlign: 'left', maxWidth: '75%' }}>\n            <p>Mostly smoke weed.</p>\n        </Message>    \n        <div style={{ direction: 'rtl' }}>\n        <Message style={{ direction: 'ltr', textAlign: 'left', maxWidth: '75%' }}>\n            <p>That's awesome! We should smoke together some time.</p>\n        </Message> \n        </div>  \n        <Message style={{ textAlign: 'left', maxWidth: '75%' }}>\n            <p>I would like that very much.</p>\n        </Message>      */}\n    </Segment>\n    )\n}\n\nrender() {\n    if (this.state.isLoading) {\n      return <PageLoader />\n    }\n    return (\n        <Grid textAlign='center' style={{ margin: '0px', height: '110vh', backgroundColor: '#cff4ff' }}>\n            <Grid.Column style={{ maxWidth: 450 }}>\n                <Header size='huge' style={{ marginTop: '10%', marginBottom: '0%' }}>Cooper</Header>\n                <Header size='small' style={{ marginTop: '1%', marginBottom: '10%' }}>The Emotional Chatbot</Header>\n                {this.getMessages()}\n                <Input \n                    size='large' \n                    name='currText'\n                    onChange={this.handleChange}\n                    value={this.state.currText}\n                    style={{ \n                        minWidth: '100%', \n                        borderWidth: '1px'\n                    }} \n                    action={{\n                        color: 'teal',\n                        content: 'Send',\n                        onClick: this.addUserText\n                      }}\n                    placeholder='Say something...' />\n                <Button \n                    size='large' \n                    onClick={this.props.resetMessages} \n                    style={{ marginTop: '10%' }}\n                >\n                        Reset Messages\n                </Button>\n            </Grid.Column>\n        </Grid>\n      )\n  }\n}\n\nexport default connect(\n  state => state.message,\n  dispatch => bindActionCreators(messageActions, dispatch)\n)(HomePage);\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router';\nimport HomePage from './components/Homepage';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          {/* <Route component={NotFound} /> */}\n      </Switch>\n    </div>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createBrowserHistory } from 'history'\nimport configureStore from './store/configureStore'\nimport { persistStore } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport PageLoader from './components/PageLoader';\n\n// Create browser history to use in the Redux store\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href')\nconst history = createBrowserHistory({ basename: baseUrl })\n\n// Get the application-wide store instance, prepopulating with state from the server where available.\nconst initialState = window.initialReduxState\nconst store = configureStore(history, initialState)\nconst persistor = persistStore(store)\n\nReactDOM.render((\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <ConnectedRouter history={history}>\n                <React.Suspense fallback={<PageLoader />}>\n                    <App />\n                </React.Suspense>\n            </ConnectedRouter>\n        </PersistGate>\n    </Provider>), document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { routerReducer, routerMiddleware } from 'react-router-redux';\nimport { connectRouter } from 'connected-react-router'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport * as Message from \"./MessageStore\";\n\nexport default function configureStore(history, initialState) {\n  const reducers = {\n    message: Message.reducer,\n  };\n\n  const middleware = [\n    thunk,\n    routerMiddleware(history)\n  ];\n\n  // In development, use the browser's Redux dev tools extension if installed\n  const enhancers = [];\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  if (isDevelopment && typeof window !== 'undefined' && window.devToolsExtension) {\n    enhancers.push(window.devToolsExtension());\n  }\n\n  const rootReducer = combineReducers({\n    ...reducers,\n    router: connectRouter(history),\n    routing: routerReducer\n  });\n\n  const persistConfig = {\n    key: 'root',\n    storage,\n  }\n  \n  const persistedReducer = persistReducer(persistConfig, rootReducer)\n\n  return createStore(\n    persistedReducer,\n    initialState,\n    compose(applyMiddleware(...middleware), ...enhancers)\n  );\n}"],"sourceRoot":""}